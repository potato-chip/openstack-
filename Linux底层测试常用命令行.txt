1、read命令从键盘读取变量的值，通常用在shell脚本中与用户进行交互的场合。该命令可以一次读取多个变量的值，变量和输入的值都需要使用空格隔开。
语法
read(选项)(参数)
选项
-p：指定读取值时的提示符；
-t：指定读取值时等待的时间（秒）。
参数
变量：指定读取值的变量名

使用read命令从键盘读取变量值，并且将值赋给指定的变量，输入如下命令：
read v1 v3 #读取变量值
执行上面的指令以后，要求键入两个数据
完成之后，可以使用echo命令将指定的变量值输出查看，输入如下命令：
echo $v1 $v3 #输出变量的值
使用echo命令输出变量值时，必须在变量名前添加符号$。否则，echo将直接输出变量名
read -p "未选择镜像，请选择：" IMG_ID;----会打印出“未选择镜像，请选择：”的提示信息

2、shell中条件判断if中的-z到-d的意思 
[ -z STRING ] “STRING” 的长度为零则为真

3、
1> /dev/null 表示将命令的标准输出重定向到 /dev/null
2>/dev/null 表示将命令的错误输出重定向到 /dev/null
也就是将1(标准输出)2(标准出错)的信息不现实出来.
dev/null就相当与windows里的回收站，只是进去了不能再出来了。
>/dev/null 就是将标准输出和标准出错的信息屏蔽不显示
在行末加 & 是后台运行标志，目的为使这个进程在后台运行

3、特殊的字符意义
$0 这个程式的执行名字
$n 这个程式的第n个参数值，n=1..9
$* 这个程式的所有参数,此选项参数可超过9个。
$# 这个程式的参数个数
$$ 这个程式的PID(脚本运行的当前进程ID号)
$! 执行上一个背景指令的PID(后台运行的最后一个进程的进程ID号)
$? 执行上一个指令的返回值 (显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误)
$- 显示shell使用的当前选项，与set命令功能相同
$@ 跟$*类似，但是可以当作数组用

4、整数比较方式
整数比较
-eq     等于,如:if ["$a" -eq "$b" ]
-ne     不等于,如:if ["$a" -ne "$b" ]
-gt     大于,如:if ["$a" -gt "$b" ]
-ge    大于等于,如:if ["$a" -ge "$b" ]
-lt      小于,如:if ["$a" -lt "$b" ]
-le      小于等于,如:if ["$a" -le "$b" ]
<  小于(需要双括号),如:(("$a" < "$b"))
<=  小于等于(需要双括号),如:(("$a" <= "$b"))
>  大于(需要双括号),如:(("$a" > "$b"))
>=  大于等于(需要双括号),如:(("$a" >= "$b"))

5、逻辑运算符
Shell还提供了与( ! )、或( -o )、非( -a )三个逻辑操作符用于将测试条件连接起来，其优先级为：“!”最高，“-a”次之，“-o”最低